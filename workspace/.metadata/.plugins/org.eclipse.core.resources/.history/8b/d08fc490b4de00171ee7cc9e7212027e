<%-- 
    Document   : basic-example
    Author     : suvradip saha
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@page import="java.sql.*" %>
<%@page import="java.util.*" %>
<%@page import="com.google.gson.*" %>
<%@page import="fusioncharts.FusionCharts" %>
<%
    
/* 
    The following 4 code lines contain the database connection information.
    Alternatively, you can move these code lines to a separate file and
    include the file here. You can also modify this code based on your 
    database connection. 
 */

 String hostdb = "localhost:3300";  // MySQl host
 String userdb = "root";  // MySQL username
 String passdb = "123456";  // MySQL password
 String namedb = "fateon";  // MySQL database name

    // Establish a connection to the database
    DriverManager.registerDriver(new com.mysql.jdbc.Driver());
    Connection con = DriverManager.getConnection("jdbc:mysql://" + hostdb + "/" + namedb , userdb , passdb);
   
    %>

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Indicador</title>
<!-- Step 1: Include the `fusioncharts.js` file. This file is needed to
        render the chart. Ensure that the path to this JS file is correct.
        Otherwise, it may lead to JavaScript errors.
--> 
        <script src="../scripts/fusioncharts.js"></script>
    </head>
    <body>
         <div id="chart"></div>
<!--    Step 2: Include the `FusionCharts.java` file as a package in your 
        project.
-->

        
<!--    Step 3:Include the package in the file where you want to show 
        FusionCharts as follows.
        
        Step 4: Create a chart object using the FusionCharts JAVA class 
        constructor. Syntax for the constructor: 
        `FusionCharts("type of chart", "unique chart id", "width of chart",
                        "height of chart", "div id to render the chart", 
                        "data format", "data source")`   
-->           
        <%
         /*
            google-gson
    
            Gson is a Java library that can be used to convert Java Objects into 
            their JSON representation. It can also be used to convert a JSON string to 
            an equivalent Java object. Gson can work with arbitrary Java objects including
            pre-existing objects that you do not have source-code of.
            link : https://github.com/google/gson    
         */
    
         Gson gson = new Gson();
            
            
            // Form the SQL query that returns the top 10 most populous countries
            String sql="SELECT * FROM fateon.fateon_registro1 group by registro_date_1 DESC LIMIT 10";

            // Execute the query.
            PreparedStatement pt=con.prepareStatement(sql);    
            ResultSet rs=pt.executeQuery();
            
            // The 'chartobj' map object holds the chart attributes and data.
            Map<String, String> chartobj = new HashMap<String, String>();
            Map<String, String> dataMap = new LinkedHashMap<String, String>();
            Map<String, String> eventsMap = new LinkedHashMap<String, String>();
            Map<String, String> valueMap = new HashMap<String, String>();
            Map<String, String> funcionMap = new HashMap<String, String>();
            ArrayList arrData = new ArrayList();
            ArrayList arrValue = new ArrayList();
            
            chartobj.put("caption", "Indicador");
            chartobj.put("upperlimit" , "0");
            chartobj.put("lowerlimit" , "25");
            chartobj.put("useColorNameAsValue" , "1");
            chartobj.put("placeValuesInside" , "1");
            chartobj.put("valueFontSize" , "20");
            chartobj.put("plottooltext" , "<div id=\'valueDiv\'> $value apps running </div>");
            chartobj.put("is3donHaver" , "1");
            chartobj.put("theme" , "hulk-light");
            dataMap.put("chart", gson.toJson(chartobj));   
            
            
 
            
            valueMap.put("minValue1", "0");
            valueMap.put("maxValue1", "5");
            valueMap.put("label1", "Bajo Carga");
            valueMap.put("code1", "#00ff00");
            arrData.add(0,valueMap);
            valueMap.put("minValue", "5");
            valueMap.put("maxValue", "10");
            valueMap.put("label", "Carga Moderada");
            valueMap.put("code", "#00cccc");
            arrData.add(1,valueMap);
            valueMap.put("minValue", "10");
            valueMap.put("maxValue", "15");
            valueMap.put("label", "Carga Continua");
            valueMap.put("code", "#ff9900");
            arrData.add(2,valueMap);
            valueMap.put("minValue", "15");
            valueMap.put("maxValue", "20");
            valueMap.put("label", "Extremadamente Cargado");
            valueMap.put("code", "#ff0000");
            arrData.add(3,valueMap);
            dataMap.put("colorrage", gson.toJson(arrData));

            
            
            funcionMap.put("rendered", "function(evtObj,argObj){ setInterval(function(){ var num = parseInt(Math.random() * (25-1)+1); FunsionCharts('chart1').feedData('&value+'+num);},5000);}");
            
             dataMap.put("value", "9");
             eventsMap.put("events", gson.toJson(funcionMap));
             FusionCharts columnChart= new FusionCharts(
                     "bulb",// chartType
                                 "chart1",// chartId
                                 "300","300",// chartWidth, chartHeight
                                 "chart",// chartContainer
                                 "json",// dataFormat
                                 gson.toJson(dataMap),//datasource
                                 gson.toJson(funcionMap)//dataevents
                             );
           
            %>
            
<!--    Step 5: Render the chart    -->                
            <%=columnChart.render()%>
        
    </body>
</html>
