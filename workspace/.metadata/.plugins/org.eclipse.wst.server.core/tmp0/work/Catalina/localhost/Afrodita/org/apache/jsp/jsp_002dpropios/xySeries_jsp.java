/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.50
 * Generated at: 2018-02-16 19:57:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp_002dpropios;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.openxava.view.View;
import java.math.BigDecimal;
import java.sql.*;
import java.util.*;
import com.google.gson.*;
import fusioncharts.FusionCharts;
import org.openxava.*;

public final class xySeries_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/openxava.tld", Long.valueOf(1518753924007L));
    _jspx_dependants.put("/jsp-propios/../xava/imports.jsp", Long.valueOf(1518753921217L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      org.openxava.controller.ModuleContext context = null;
      synchronized (session) {
        context = (org.openxava.controller.ModuleContext) _jspx_page_context.getAttribute("context", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (context == null){
          context = new org.openxava.controller.ModuleContext();
          _jspx_page_context.setAttribute("context", context, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');



String viewObject = request.getParameter("viewObject");
viewObject = (viewObject == null || viewObject.equals(""))?"xava_view":viewObject;
View view = (org.openxava.view.View) context.get(request,viewObject);
	   
	   String hostdb = "localhost:3306";  // MySQl host
	   //String hostdb = "45.7.229.159:3306";
	   String userdb = "mysql";  // MySQL username
	   String passdb = "afrodita";  // MySQL password

	   String namedb = "fateon";  // MySQL database name

	// Establish a connection to the database
	DriverManager.registerDriver(new com.mysql.jdbc.Driver());
	Connection con = DriverManager.getConnection("jdbc:mysql://" + hostdb + "/" + namedb, userdb, passdb);
	
		Gson gson = new Gson();
		Map<String, String> chartobjMap = new HashMap<String, String>();
		Map<String, String> dataMap = new LinkedHashMap<String, String>();
		Map<String, String> categoriesMap = new LinkedHashMap<String, String>();
		chartobjMap.put("caption", "GrÃ¡fico de Lineas");
		chartobjMap.put("subCaption", "Origen (Entradas y Salidas)");
		chartobjMap.put("theme", "fint");
		chartobjMap.put("showhovereffect", "1");
		chartobjMap.put("xAxisName", "Fecha");
		chartobjMap.put("showValues", "0");
		chartobjMap.put("numbersuffix", "BPS");
		chartobjMap.put("drawCrossLine", "2");
		chartobjMap.put("crossLineAlpha", "100");
		chartobjMap.put("crossLineColor", "#FAFAFA");
		chartobjMap.put("ajustDiv", "1");
		//chartobjMap.put("yAxisMaxvalue", "10000000000");
		chartobjMap.put("yAxisMinvalue", "10");
		chartobjMap.put("numDivLines", "10");
		//chartobjMap.put("numVDivLines", "50");
		//chartobjMap.put("vDivLineColor", "#00ffaa");
		//chartobjMap.put("VDivLineThickness", "10");//groso line vertical en px
		chartobjMap.put("VDivLineAlpha", "50");//transparencia de la lineas verticales 0 trasparente 100 opaco
		chartobjMap.put("showAlternateVGridColor", "0");
		chartobjMap.put("alternateVGridColor", "#00ffaa");
		//chartobjMap.put("alternateVGridAlpha", "50");
		chartobjMap.put("drawAnchors", "1");
		chartobjMap.put("crossLineColor", "#876EA1");
		//chartobjMap.put("logoURL", "http://static.fusioncharts.com/sampledata/images/Logo-HM-72x72.png");
		chartobjMap.put("logoScale", "110");
		chartobjMap.put("logoPosition", "TR");
		chartobjMap.put("logoAlpha", "40");
		chartobjMap.put("exportenabled", "1");
		chartobjMap.put("exportatclient", "1");
		chartobjMap.put("exporthandler", "http://export.api3.fusioncharts.com");
		chartobjMap.put("html5exporthandler", "http://export.api3.fusioncharts.com");
		dataMap.put("chart", gson.toJson(chartobjMap));

		// Categoria
		
		//String sql = "SELECT registro_date_1 FROM fateon.fateon_registro where origen_id = '"+view.getValue("origen.oid")+"' GROUP BY registro_date_1";
		String sql = "SELECT * FROM fateon.fateon_registro where sensor_id= '"+view.getValue("sensor.oid")+"' and origen_id='"+view.getValue("origen.oid")+"' order by registro_date_1";
		System.out.println(" JSP-->"+sql);
		// Execute the query.
		PreparedStatement pt = con.prepareStatement(sql);
		ResultSet rs = pt.executeQuery();

		// Push the data into the array using map object.
		ArrayList arrData = new ArrayList();
		ArrayList arrDataCategories = new ArrayList();
		while (rs.next()) {
			Map<String, String> lv = new HashMap<String, String>();
			lv.put("label", rs.getString("registro_date_1"));
			arrData.add(lv);
		}
		rs.close();
		categoriesMap.put("category", gson.toJson(arrData));
		arrDataCategories.add(categoriesMap);
		dataMap.put("categories", gson.toJson(arrDataCategories));

		
		 /* Valores Flotante*/
	       
	    sql = "SELECT (max(registro_float_1)*1.20) as lineatope FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id='"+view.getValue("origen.oid")+"' order by registro_date_1";
	    System.out.println(" JSP-->"+sql);
		 
		 pt=con.prepareStatement(sql);    
		 rs=pt.executeQuery();
		 rs.next();
		 String valorFlotabte= rs.getString("lineatope");
		 rs.close();
		 
		 
		  /* Valores Percentil */
		  
		 sql = "SELECT (count(1)*95)/100 as total FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id= '"+view.getValue("origen.oid")+"'";
		  
		 System.out.println(" JSP-->"+sql);
		 
		 pt=con.prepareStatement(sql);    
		 rs=pt.executeQuery();
		 rs.next();
		 int fila= rs.getInt("total");
		 rs.close();
		 
		 sql = "SELECT registro_float_1 as percentil FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id= '"+view.getValue("origen.oid")+"' order by registro_float_1 asc limit "+fila+",1";
		  
		 System.out.println(" JSP-->"+sql);
		 
		 pt=con.prepareStatement(sql);    
		 rs=pt.executeQuery();
		 rs.next();
		 String percentil= rs.getString("percentil");
		 rs.close();
		
		 System.out.println("***************************************");
		 System.out.println("");
		 System.out.println(percentil);
		 System.out.println("");
		 System.out.println("***************************************");
		 
		 
		 //sql="SELECT CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(GROUP_CONCAT(registro_float_2 ORDER BY registro_float_2 SEPARATOR ','),',', 95/100 * COUNT(1) + 1), ',', -1) AS DECIMAL) AS `percentil` FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id= '"+view.getValue("origen.oid")+"'";
		 sql = "SELECT (count(1)*95)/100 as total FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id= '"+view.getValue("origen.oid")+"'";
		  
		 System.out.println(" JSP-->"+sql);
		 
		 pt=con.prepareStatement(sql);    
		 rs=pt.executeQuery();
		 rs.next();
		 fila= rs.getInt("total");
		 rs.close();
		 //int fila = Math.round((count(1)*95)/100);
		 sql = "SELECT registro_float_2 as percentil FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id= '"+view.getValue("origen.oid")+"' order by registro_float_1 asc limit "+fila+",1"; 
		 System.out.println(" JSP-->"+sql);
		  
		 pt=con.prepareStatement(sql);    
		 rs=pt.executeQuery();
		 rs.next();
		 String percentil2= rs.getString("percentil");
		 rs.close();
		
		 System.out.println("***************************************");
		 System.out.println("");
		 System.out.println(percentil2);
		 System.out.println("");
		 System.out.println("***************************************");
	
		//Serie 1
		Map<String, String> serieMap = new LinkedHashMap<String, String>();
		Map<String, String> confSerieMap = new LinkedHashMap<String, String>();
		sql = "SELECT registro_float_1,registro_float_2,registro_time_1 FROM fateon.fateon_registro  where sensor_id='"+view.getValue("sensor.oid")+"' and origen_id = '"+view.getValue("origen.oid")+"' order by registro_date_1";
		System.out.println(" JSP-->"+sql);
		
		// Execute the query.
		pt = con.prepareStatement(sql);
		rs = pt.executeQuery();

		// Push the data into the array using map object.
		ArrayList arrDataSet = new ArrayList();
		ArrayList arrDataSeries = new ArrayList();
		confSerieMap.put("seriesname", "Entrada");
		confSerieMap.put("anchorBgColor", "#876EA1");
		confSerieMap.put("drawAnchors", "0");
		

		while (rs.next()) {
			Map<String, Float> vv = new HashMap<String, Float>();
			vv.put("value", rs.getFloat("registro_float_1"));
			arrDataSet.add(vv);
		}

		confSerieMap.put("data", gson.toJson(arrDataSet));
		arrDataSeries.add(0, confSerieMap);

		// rs.close();
		//Serie 2
		rs.beforeFirst();
		Map<String, String> confSerieMap1 = new LinkedHashMap<String, String>();
		confSerieMap1.put("seriesname", "Salida");
		confSerieMap1.put("anchorBgColor", "#72D7B2");
		confSerieMap1.put("drawAnchors", "0");
		ArrayList arrDataSet1 = new ArrayList();
		while (rs.next()) {
			Map<String, Float> vv1 = new HashMap<String, Float>();
			vv1.put("value", rs.getFloat("registro_float_2"));
			arrDataSet1.add(vv1);
		}

		confSerieMap1.put("data", gson.toJson(arrDataSet1));
		arrDataSeries.add(1, confSerieMap1);

		//Serie 3 Valor Flotante
		rs.beforeFirst();
		Map<String, String> confSerieMap4 = new LinkedHashMap<String, String>();
		confSerieMap4.put("seriesname", "Valor Flotante");
		confSerieMap4.put("anchorBgColor", "#4B0082");
		confSerieMap4.put("drawAnchors", "0");
		ArrayList arrDataSet4 = new ArrayList();
		while (rs.next()) {
			Map<String, String> vv4 = new HashMap<String, String>();
			vv4.put("value",valorFlotabte);
			arrDataSet4.add(vv4);
		}

		confSerieMap4.put("data", gson.toJson(arrDataSet4));
		arrDataSeries.add(2, confSerieMap4);

		//Serie 4 Percentil
		rs.beforeFirst();
		Map<String, String> confSerieMap5 = new LinkedHashMap<String, String>();
		confSerieMap5.put("seriesname", "Percentil 95 Entrada");
		confSerieMap5.put("anchorBgColor", "#4B0082");
		confSerieMap5.put("drawAnchors", "0");
		ArrayList arrDataSet5 = new ArrayList();
		while (rs.next()) {
			Map<String, String> vv5 = new HashMap<String, String>();
			vv5.put("value",percentil);
			arrDataSet5.add(vv5);
		}

		confSerieMap5.put("data", gson.toJson(arrDataSet5));
		arrDataSeries.add(3, confSerieMap5);
		
		
		//Serie 5 Percentil
		rs.beforeFirst();
		Map<String, String> confSerieMap6 = new LinkedHashMap<String, String>();
		confSerieMap6.put("seriesname", "Percentil 95 Salida");
		confSerieMap6.put("anchorBgColor", "#642113");
		confSerieMap6.put("drawAnchors", "0");
		ArrayList arrDataSet6 = new ArrayList();
		while (rs.next()) {
			Map<String, String> vv6 = new HashMap<String, String>();
			vv6.put("value",percentil2);
			arrDataSet6.add(vv6);
		}

		confSerieMap6.put("data", gson.toJson(arrDataSet6));
		arrDataSeries.add(4, confSerieMap6);
		dataMap.put("dataset", gson.toJson(arrDataSeries));
		
		rs.close();
		
		System.out.println(gson.toJson(dataMap));
		
		FusionCharts mslineChat = new FusionCharts("msline", // chartType
				"chart1", // chartId
				"90%", "600", // chartWidth, chartHeight
				"chart", // chartContainer
				"json", // dataFormat
				gson.toJson(dataMap) //dataSource
		);
	
	
      out.write("\r\n");
      out.write("\t<div id=\"chart\"></div>\r\n");
      out.write("\t<input type=\"button\" value=\"Actualizar Pagina\" onclick=\"window.location='/Afrodita/m/VerOrigen'\">\r\n");
      out.write("\t");
      out.print(mslineChat.render());
      out.write("\r\n");
      out.write("\t\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
